import logging
import openai
import os
from dotenv import load_dotenv
from telegram import Update, constants
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)


load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not TELEGRAM_TOKEN:
    logger.error("–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    exit()
if not OPENAI_API_KEY:
    logger.error("–û—à–∏–±–∫–∞: –ö–ª—é—á API OpenAI –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    exit()

try:
    openai_client = openai.AsyncOpenAI(api_key=OPENAI_API_KEY)
    logger.info("–ö–ª–∏–µ–Ω—Ç OpenAI —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ OpenAI: {e}")
    exit()

user_conversations = {}

# –ó–∞–¥–∞—á–∞ —Ä–æ–ª–∏ –ò–ò
DEFAULT_SYSTEM_MESSAGE = {"role": "system", "content": "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –ò–ò –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è. –ò–ò –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π –ò–ò –¥–ª—è –ª—é–±—ã—Ö —Ü–µ–ª–µ–π. –ú—ã –µ—â–µ –Ω–∞—á–∏–Ω–∞—é—â–∞—è –∫–æ–º–∞–Ω–¥–∞, –Ω–æ –≤—Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–±–µ—Ä–µ–º –æ–±–æ—Ä–æ—Ç—ã."}

# –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start."""
    user = update.effective_user
    chat_id = update.effective_chat.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} (ID: {user.id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –≤ —á–∞—Ç–µ {chat_id}.")

    user_conversations[chat_id] = [DEFAULT_SYSTEM_MESSAGE]

    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! üëã\n\n"
        "–Ø –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –ò–ò –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å.\n\n"
        "–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ —Ä–∞–º–∫–∞—Ö —Å–µ—Å—Å–∏–∏ (–¥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞).\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /reset.",
    )

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    chat_id = update.effective_chat.id
    user = update.effective_user

    user_conversations[chat_id] = [DEFAULT_SYSTEM_MESSAGE]
    logger.info(f"–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id} (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name}) —Å–±—Ä–æ—à–µ–Ω–∞.")
    await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å–±—Ä–æ—à–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ GPT –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–≤–µ—á–∞–µ—Ç —Å –ø–æ–º–æ—â—å—é OpenAI."""
    chat_id = update.effective_chat.id
    user_message_text = update.message.text

    if chat_id not in user_conversations:
        user_conversations[chat_id] = [DEFAULT_SYSTEM_MESSAGE]
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id}")

    user_conversations[chat_id].append({"role": "user", "content": user_message_text})

    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —á–∞—Ç–∞ {chat_id}: '{user_message_text}'")

    await context.bot.send_chat_action(chat_id=chat_id, action=constants.ChatAction.TYPING)

    try:
        response = await openai_client.chat.completions.create(
            model="gpt-3.5-turbo", 
            messages=user_conversations[chat_id],
            #max_tokens=500
        )

        assistant_response = response.choices[0].message.content

        user_conversations[chat_id].append({"role": "assistant", "content": assistant_response})

        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç OpenAI –¥–ª—è —á–∞—Ç–∞ {chat_id}: '{assistant_response[:50]}...'") 

        await update.message.reply_text(assistant_response)
# –û—à–∏–±–∫–∏
    except openai.RateLimitError:
        logger.warning(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ OpenAI –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ OpenAI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.")
        user_conversations[chat_id].pop()
    except openai.AuthenticationError:
         logger.error("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ OpenAI. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á.")
         await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–∏—Å—É –ò–ò (Auth). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
         user_conversations[chat_id].pop() #
    except openai.APIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ API OpenAI –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        user_conversations[chat_id].pop()
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        user_conversations[chat_id].pop() 

    MAX_HISTORY_LEN = 11 
    if len(user_conversations[chat_id]) > MAX_HISTORY_LEN:
         user_conversations[chat_id] = [user_conversations[chat_id][0]] + user_conversations[chat_id][-(MAX_HISTORY_LEN - 1):]
         logger.info(f"–ò—Å—Ç–æ—Ä–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id} –±—ã–ª–∞ –æ–±—Ä–µ–∑–∞–Ω–∞ –¥–æ {MAX_HISTORY_LEN} —Å–æ–æ–±—â–µ–Ω–∏–π.")


def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    application = Application.builder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("reset", reset))

    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()